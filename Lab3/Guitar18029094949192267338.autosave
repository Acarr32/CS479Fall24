import java.util.ArrayList;

float[] stringY = new float[6]; // Array to store Y-coordinates of each string
int stringSpacing = 8; // Space between each string
int sizeOfGuitarString = 1;
ArrayList<GameBlock> blocks = new ArrayList<GameBlock>();
int targetY = height;
boolean gameStarted = false;
int lastBlockTime = 0; // Track the last time a block was initialized
int interval = 500; // Time interval in milliseconds

class GameBlock {
  float x, y, w, h;
  int col;
  float speed = 2.5;
  int note;

  GameBlock(float x, float y, float w, float h, int col, int note) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.col = col;
    this.note = note;
  }

  // Update position of the note
  void update() {
    y += speed;
  }

  // Display the note
  void display() {
    fill(col);
    rect(x, y, w, h);
  }

  // Reset note to the top of the screen
  void resetPosition() {
    y = -50; // Start from above the screen
  }

  // Check if the note is at the target line for click detection
  boolean isAtTarget() {
    return y >= targetY && y <= targetY + h;
  }
}

void initializeBlocks() {
  int note = int(random(1, 7));
  float x = width - 700 + 20 + note * 80; // Position each block horizontally
  float y = -50; // Start each block above the screen
  float w = 160;
  float h = 40;
  int col = color(100 + note * 30, 150, 200); // Different color for each block
  GameBlock block = new GameBlock(x, y, w, h, col, note);
  blocks.add(block);
}

void guitarMode() {
  initializeBlocks();
  calculateStringPositions();
  drawBackButton();
  renderGuitar();
  drawBackButton();
  if (!gameStarted) {
    drawStartButton(); // Draw the start button if the game hasn't started
  }
  if (gameStarted) {
    drawGameInterface(); // Only draw the game interface when the game has started
    if (millis() - lastBlockTime > interval) {
      initializeBlocks();
      lastBlockTime = millis(); // Update the last block time
    }
  }
}

void drawStartButton() {
  fill(0, 150, 255); // Blue color for button
  rect(width / 2 - 50, 50, 100, 40); // Position the button above the guitar

  fill(255); // White color for text
  textAlign(CENTER, CENTER);
  textSize(16);
  text("Start Game", width / 2, 70); // Center the text on the button
}

void renderGuitar() {
  background(255); // Set background color

  // Draw guitar body
  fill(139, 69, 19); // Brown color for the guitar body
  ellipse(width / 2 - 250, height / 2, 500, 300); // Main body (horizontal)

  // Draw guitar neck
  fill(160, 82, 45); // Slightly darker color for the neck
  rect(width / 2 - 600, height / 2 - 25, 400, 50);

  // Draw sound hole
  fill(0); // Black color for sound hole
  ellipse(width / 2 - 250, height / 2, 80, 80);

  // Draw 6 strings and store their positions
  stroke(220);
  strokeWeight(2);
  for (int i = 0; i < 6; i++) { // Change loop limit to 6
    float yPosition = height / 2 + (i - 2.5) * stringSpacing; // Calculate Y-position for each string
    stringY[i] = yPosition; // Store each string's Y-coordinate in array
    line(width / 2 - 600, yPosition, width / 2, yPosition);
  }
}

void drawGameInterface() {
  int interfaceWidth = 700;
  int interfaceHeight = height;
  int interfaceX = width - interfaceWidth;
  int interfaceY = 0;

  fill(240);
  rect(interfaceX, interfaceY, interfaceWidth, interfaceHeight);

  // Draw target line for hit detection
  stroke(255, 0, 0);
  strokeWeight(2);
  line(interfaceX, targetY + 40, width, targetY + 40);

  // Update and display each note
  for (int i = 0; i < blocks.size(); i++) {
    blocks.get(i).update();
    blocks.get(i).display();

    // Check if note has reached target Y position
    if (blocks.get(i).y >= targetY + 40) {
      blocks.get(i).resetPosition(); // Reset position if missed
    }
  }
}

void calculateStringPositions() {
  for (int i = 0; i < 6; i++) { // Change loop limit to 6
    stringY[i] = height / 2 + (i - 2.5) * stringSpacing; // Set Y-coordinates for even spacing
  }
}

void guitarSerial(Integer[] keysActive){
  SoundFile[] guitarNotes = new SoundFile[sizeOfGuitarString];
  for(int i = 0; i<keysActive.length; i++){
    String noteFile = "./guitar-mp3/";
    if(keysActive[i] == 0){
      break;
    }
    switch(keysActive[i]){
      case 1:
        noteFile += "1st_String_E_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
      case 2:
        noteFile += "2nd_String_B_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
      case 3:
        noteFile += "3rd_String_G_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
      case 4:
        noteFile += "4th_String_D_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
      case 5:
        noteFile += "5th_String_A_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
      case 6:
        noteFile += "6th_String_E_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
      case 7:
        noteFile += "C_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
      case 8:
        noteFile += "D_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
      case 9:
        noteFile += "Dm_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
      case 10:
        noteFile += "E_64kb.mp3";
        guitarNotes[i] = new SoundFile(this, noteFile);
        break;
    }
  }
  playString(guitarNotes);
}

void playString(SoundFile[] guitarNotes) {
  for(int i = 0; i<guitarNotes.length; i++){
    guitarNotes[i].play();
  }
}
